head	1.2;
access;
symbols;
locks
	oz:1.2; strict;
comment	@ * @;


1.2
date	99.02.08.19.58.15;	author oz;	state Exp;
branches;
next	1.1;

1.1
date	99.02.03.01.48.41;	author oz;	state Exp;
branches;
next	;


desc
@berkeley yacc - warshall.c
@


1.2
log
@transitive closure is now static.
@
text
@#include "defs.h"

static void
transitive_closure(unsigned *R, int n)
{
    int rowsize;
    unsigned i;
    unsigned *rowj;
    unsigned *rp;
    unsigned *rend;
    unsigned *ccol;
    unsigned *relend;
    unsigned *cword;
    unsigned *rowi;

    rowsize = WORDSIZE(n);
    relend = R + n * rowsize;

    cword = R;
    i = 0;
    rowi = R;
    while (rowi < relend) {
	ccol = cword;
	rowj = R;

	while (rowj < relend) {
	    if (*ccol & (1 << i)) {
		rp = rowi;
		rend = rowj + rowsize;
		while (rowj < rend)
		    *rowj++ |= *rp++;
	    }
	    else {
		rowj += rowsize;
	    }

	    ccol += rowsize;
	}

	if (++i >= BITS_PER_WORD) {
	    i = 0;
	    cword++;
	}

	rowi += rowsize;
    }
}

void
reflexive_transitive_closure(unsigned *R, int n)
{
    int rowsize;
    unsigned i;
    unsigned *rp;
    unsigned *relend;

    transitive_closure(R, n);

    rowsize = WORDSIZE(n);
    relend = R + n * rowsize;

    i = 0;
    rp = R;
    while (rp < relend) {
	*rp |= (1 << i);
	if (++i >= BITS_PER_WORD) {
	    i = 0;
	    rp++;
	}

	rp += rowsize;
    }
}
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
void
@
